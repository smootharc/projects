#!/usr/bin/python

# vi:syntax=python

import sqlite3
import click
from tabulate import tabulate
from pathlib import Path
import datetime as dt
#from prompt_toolkit import prompt
#from prompt_toolkit.validation import Validator, ValidationError
#import re

def dbopen(readonly=False):

    try:

        programdir = Path(__file__).parent.resolve()
        
        if 'projects' in str(programdir):

            dbfile = Path().home() / 'projects' / '.local' / 'share' / 'medical.db'
        
        else:

            dbfile = Path().home() / '.local' / 'share' / 'medical.db'

        uri = 'file:' + str(dbfile)

        if readonly:

            db = sqlite3.connect(uri + '?mode=ro', uri=True)

        else:

            db = sqlite3.connect(uri, uri=True)

        db.execute("pragma foreign_keys = on")

        db.row_factory = sqlite3.Row
            
    except sqlite3.OperationalError as e:

        click.echo(f'{str(e).capitalize()}: {dbfile}')

        exit(1)

    return db

@click.group()
def weight():

    '''Maintain a weight and food database.
    '''

@weight.command()
def select():

    '''Print a table of all records in the weight database.
    '''

    db = dbopen(True)
    table = db.execute('select * from weight order by date')
    names = [description[0] for description in table.description]
    print(tabulate(table,names))

@weight.command()
@click.option('--date', '-d', type=click.DateTime(['%Y-%m-%d']), default=str(dt.date.today()))
@click.option('--weight', '-w', type=click.FLOAT, default=0)
@click.option('--food', '-f')
def insert(date, weight, food):

    '''Insert a record into the weight database.
    '''

    date = date.strftime('%Y-%m-%d')

    sql = '''insert into weight (date, weight, food) values(?, ?, ?)'''

    db = dbopen()

    try:

        with db:

            cursor = db.cursor()

            cursor.execute(sql, (date, weight, food))

            click.echo(f"Insertion of weight {cursor.lastrowid} succeeded.")

    except sqlite3.Error as e:

        if 'FOREIGN' in e.args[0]:

            click.echo(f"Medication '{name}' does not exist.")

        else:

            click.echo(f'Weight insertion {e}')
        
        exit(1)


@weight.command()
@click.argument('id', type=int)
def update(id):

    '''Update the weight record having the given ID.
    '''

    db = dbopen()

    sql = '''select strftime('%Y-%m-%d',date), weight, food from weight where id = ?'''

    weight = db.execute(sql, (id,)).fetchone()
    
    if not weight:

        click.echo(f"Weight {id} not found.")

        exit(1)
        
    ( date, weight, food ) = weight

    if food == None:

        food = ''
    
    click.echo(f"Updating weight {id}:")

    date = click.prompt("Date: ", type=click.DateTime(['%Y-%m-%d']), default=date )

    weight = click.prompt("Weight: ", default=weight)

    food = click.prompt("Food: ", default=food)
    
    sql = "update weight set date = date(?), weight = ?, food = ? where id = ?"

    try:

        with db:

            db.execute(sql, (date, weight, food, id))
                
    except sqlite3.Error as e:

        click.echo(f'Update weight: {e}')
    
        exit(1)

    click.echo(f'Update of weight {id} succeeded.')


@weight.command()
@click.argument('id', type=int)
def delete(id):

    '''Delete the weight record having the given ID.  The ID must be an integer.
    '''

    db = dbopen()

    sql = 'delete from weight where id = ?'

    try:

        with db:

            deleted = db.execute(sql,(id,))

            if deleted.rowcount == 0:

                click.echo(f"Deletion of weight {id} failed. Are you sure it exists?")

                exit(1)

            else:

                if click.confirm(f'Confirm deletion of weight record with ID number: {id}', default=False, show_default=True):
                
                    click.echo(f'Deletion of weight {id} succeeded.')

                else:

                    click.echo(f'Confirmation failed. weight {id} not deleted.' )

                    db.rollback()

    except sqlite3.Error as e:

        click.echo(e)

        exit(1)

if __name__ == '__main__':
        weight()
