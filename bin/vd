#!/usr/bin/env python

# vi:syntax=python

import typer
from typing_extensions import Annotated
from typing import Optional
import rich
import tempfile
import mimetypes
import subprocess
import re
from pathlib import Path

def getfiles(directory: Path, names: str ):

    try:

        if names.islower():

            regex = re.compile(names, re.IGNORECASE)

        else:

            regex = re.compile(names)

    except:

        typer.echo("Invalid regular expression in option: --files.")

        raise typer.Exit(1)

    files = ( f for f in Path(directory).expanduser().rglob('*') if regex.search(str(f)) and '_unpack' not in str(f) )

    for f in files:

        if f.is_file():

            yield f.resolve()

def main(
        minutes: Annotated[int, typer.Option('--minutes', '-m', help="Delete files in the ~/Downloads folder older than INTEGER minutes.")] = -1,
        files: Annotated[str, typer.Option('--files', '-f', help="Display only files with pathnames matching TEXT regular expression.")] = ".*",
        directory: Annotated[Path, typer.Option('--directory', '-d', help="Search directory PATH.")] = Path('~/Downloads').expanduser(),
        sort: Annotated[bool, typer.Option('--sort', '-n', help="Sort files with the newest change time first.")] = True,
        ):

    '''Display images and videos from a directory that has absolutes pathnames matching some regex.  Normally sorted newest to oldest.'''


    files = getfiles(directory, files)
        
    videos = []

    images = []

    mimetypes.init

    for file in files:
        
        try:

            mime_type = mimetypes.guess_type(file)[0]

            if mime_type is not None:

                if 'video' in mime_type:

                    videos.append((str(file), Path(file).stat().st_ctime))

                if 'image' in mime_type:
                
                    images.append((str(file), Path(file).stat().st_ctime))

        except FileNotFoundError as e:

            typer.echo(e)


    if len(images) > 0:

        if sort:

            images.sort(key = lambda fctime: fctime[1], reverse = True)

        with tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8') as tf:

            with open(tf.name, "w") as fd:

                for i in images:

                    try:

                        fd.write(i[0] + "\n")

                    except UnicodeError:

                        continue

            subprocess.run(['feh', '-dqFf', fd.name])
    
    else:

        print("No images found!")

    if len(videos) > 0:

        if sort:

            videos.sort(key = lambda fctime: fctime[1], reverse = True)

        with tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8') as tf:

            with open(tf.name, "w") as fd:

                fd.write("#EXTM3U\n")

                for v in videos:

                    try:

                        fd.write(v[0] + "\n")

                    except UnicodeError:

                        continue

            subprocess.run(['mpv', fd.name, '--really-quiet'])
    
    else:

        print('No videos found!')

    if minutes >= 0:

        subprocess.run(['ddl', str(minutes)])

if __name__ == '__main__':
    typer.run(main)
