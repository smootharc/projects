#!/usr/bin/env python

# vi:syntax=python

import tempfile
import click
import mimetypes
import subprocess
import re
from pathlib import Path

def getfiles(directory, names):

    try:

        if names.islower():

            regex = re.compile(names, re.IGNORECASE)

        else:

            regex = re.compile(names)

    except:

        click.echo("Invalid regular expression in option: -f TEXT.", err=True)

        exit(1)

    files = ( f for f in Path(directory).expanduser().rglob('*') if regex.search(str(f)) and '_unpack' not in str(f) )

    for f in files:

        if f.is_dir():

            getfiles(f.name,'.*')

            continue

        if f.is_file():

            yield f.resolve()

@click.command()

@click.option('-n', 'nosort', is_flag=True, help='No sort.')

@click.option('-m','--minutes', type=int, required=False, help='Delete files older than INTEGER minutes.')

@click.option('-d', '--directory', default=Path('~/Downloads').expanduser(), type=click.Path(exists=True), show_default=True, help='Directory to search.' )

@click.option('-f', '--files', required=False, default='.*', show_default=True, help='Return absolute pathnames matching the regex TEXT.')

def main(minutes, files, directory, nosort):

    '''Display images and videos from a directory that have absolutes pathnames matching some regex.  Normally sorted newest to oldest.'''

    files = getfiles(directory, files)
        
    videos = []

    images = []

    mimetypes.init

    for file in files:
        
        try:

            mime_type = mimetypes.guess_type(file)[0]

            if mime_type is not None:

                if 'video' in mime_type:

                    videos.append((str(file), Path(file).stat().st_ctime))

                if 'image' in mime_type:
                
                    images.append((str(file), Path(file).stat().st_ctime))

        except FileNotFoundError as e:

            click.echo(e)


    if len(images) > 0:
        if not nosort:

            images.sort(key = lambda fctime: fctime[1], reverse = True)

        with tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8') as tf:

            with open(tf.name, "w") as fd:

                for i in images:

                    try:

                        fd.write(i[0] + "\n")

                    except UnicodeError:

                        continue

            subprocess.run(['feh', '-dqFf', fd.name])
    
    else:

        print("No images found!")

    if len(videos) > 0:

        if not nosort:

            videos.sort(key = lambda fctime: fctime[1], reverse = True)

        with tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8') as tf:

            with open(tf.name, "w") as fd:

                fd.write("#EXTM3U\n")

                for v in videos:

                    try:

                        fd.write(v[0] + "\n")

                    except UnicodeError:

                        continue

            subprocess.run(['mpv', fd.name])
    
    else:

        print('No videos found!')

    if minutes is None:

        subprocess.run(['ddl'])

    else:

        subprocess.run(['ddl', str(minutes)])

if __name__ == '__main__':
    main()
